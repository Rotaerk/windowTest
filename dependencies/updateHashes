#!/usr/bin/env bash
set -eu

usage() {
  echo >&2 "syntax:
updateHashes --all
updateHashes --missing
updateHashes <depName> [<depName> ...]"
  exit 1
}

unwrapString() {
  x="${3#$1}"
  echo "${x%$2}"
}

readSpec() {
  unwrapString \" \" $(nix-instantiate --eval -E 'with (import '"$specsFile"')."'"$1"'"; '"$2")
}

baseDir=$(dirname "$0")

specsFile="$baseDir/specs.nix"
hashesFolder="$baseDir/hashes"

if (( $# == 0 )); then
  echo >&2 "No arguments provided."
  usage
fi

case "$1" in
  --all)

    if (( $# > 1 )); then
      echo >&2 "Unexpected arguments following --all."
      usage
    fi

    # get an array of the attribute names from the specs file.
    read -r -a depNames <<< "$(unwrapString '[ ' ' ]' "$(nix-instantiate --eval -E 'builtins.attrNames (import '"$specsFile"')')")"

    depsToHash=()
    for quotedDep in "${depNames[@]}"; do
      depsToHash+=($(unwrapString \" \" $quotedDep))
    done
    ;;
  
  --missing)

    if (( $# > 1 )); then
      echo >&2 "Unexpected arguments following --missing."
      usage
    fi

    # get an array of the attribute names from the specs file.
    read -r -a depNames <<< "$(unwrapString '[ ' ' ]' "$(nix-instantiate --eval -E 'builtins.attrNames (import '"$specsFile"')')")"

    depsToHash=()
    for quotedDep in "${depNames[@]}"; do
      dep=$(unwrapString \" \" $quotedDep)
      if [ ! -f $hashesFolder/$dep ]; then
        depsToHash+=($dep)
      fi 
    done
    ;;

  *)
    depsToHash=("$@")
    ;;
esac

if (( ${#depsToHash[@]} == 0 )); then
  echo 'No dependencies to hash!'
  exit 0
fi

echo 'Deps: '${depsToHash[@]}

nixPrefetchScripts="$(nix-build --no-out-link -E '(import <nixpkgs> {}).nix-prefetch-scripts')"

for dep in "${depsToHash[@]}"; do
  echo
  echo 'Dependency: '$dep

  depScheme="$(readSpec "$dep" scheme)"

  case "$depScheme" in

    github)
      githubArchiveUrl="$(readSpec "$dep" '"https://github.com/${owner}/${repo}/archive/${rev}.tar.gz"')"

      echo 'Archive URL: '$githubArchiveUrl

      hash="$($nixPrefetchScripts/bin/nix-prefetch-zip --hash-type sha256 "$githubArchiveUrl")"
      ;;

    hackage)
      packageId="$(readSpec "$dep" packageId)"

      echo 'Package ID: '$packageId

      hash="$(nix-prefetch-url mirror://hackage/"$packageId".tar.gz)"
      ;;

    *)
      echo >&2 'Unrecognized scheme: '$depScheme
      continue
      ;;

  esac

  echo 'Hash: '$hash

  hashFile=$hashesFolder/$dep
  echo -n $hash > $hashFile

  echo 'Updated: '$hashFile

done
